{"version":3,"sources":["components/Square/Square.js","components/Board.js","components/Settings/Settings.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","style","width","squareWidth","height","squareHeight","fontSize","Math","min","squareClasses","winnerSquars","includes","id","push","className","join","onClick","value","Board","i","this","squares","renderSquare","Component","settings","type","placeholder","onChange","widthChanged","heightChanged","INITIALSTATE","isXNext","stepNumber","Array","fill","winner","winnerLine","Game","state","handleWidthChange","bind","handleHeightChange","currentSquares","setState","length","calculateWinner","lines","a","b","c","e","target","winStatus","event","handleClick","resetGame","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0e343b8.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Square.css'\r\n\r\n\r\nexport default function Square(props) {\r\n\r\n  const style = {\r\n    width: props.squareWidth + 'px',\r\n    height: props.squareHeight + 'px',\r\n    fontSize: Math.min(props.squareWidth, props.squareHeight) - 20 + 'px'\r\n  };\r\n\r\n  const squareClasses = ['square'];\r\n  if (props.winnerSquars.includes(props.id)) {\r\n    squareClasses.push('winnerSquare');\r\n  }\r\n\r\n  return (\r\n    <button className={squareClasses.join(' ')} onClick={props.onClick} style={style}>\r\n      {props.value}\r\n    </button>\r\n  )\r\n}\r\n","import React, {Component} from 'react';\r\nimport Square from './Square/Square';\r\n\r\n\r\nexport default class Board extends Component {\r\n\r\n  renderSquare(i) {\r\n    return <Square value={this.props.squares[i]}\r\n                   id={i}\r\n                   onClick={() => this.props.onClick(i)}\r\n                   squareWidth={this.props.squareWidth}\r\n                   squareHeight={this.props.squareHeight}\r\n                   winnerSquars={this.props.winnerSquars}\r\n    />\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div>\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div>\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './Settings.css'\n\n\nconst settings = props => {\n  return (\n    <div className=\"dimensions\">\n\n      <div className=\"input\">\n        <span>Width:</span>\n        <input type=\"number\"\n               placeholder=\"width\"\n               onChange={props.widthChanged}\n               value={props.width}\n        />\n      </div>\n\n      <div className=\"input\">\n        <span>Height:</span>\n        <input type=\"number\"\n               placeholder=\"height\"\n               onChange={props.heightChanged}\n               value={props.height}\n        />\n      </div>\n\n    </div>\n  );\n};\n\nexport default settings;\n","import React, {Component} from 'react'\r\nimport Board from '../Board';\r\nimport Settings from '../Settings/Settings'\r\nimport './Game.css';\r\n\r\n\r\nconst INITIALSTATE = {\r\n  isXNext: true,\r\n  stepNumber: 0,\r\n  squares: Array(9).fill(null),\r\n  width: 80,\r\n  height: 80,\r\n  winner: null,\r\n  winnerLine: []\r\n};\r\n\r\nexport default class Game extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = INITIALSTATE;\r\n\r\n    this.handleWidthChange = this.handleWidthChange.bind(this);\r\n    this.handleHeightChange = this.handleHeightChange.bind(this);\r\n  }\r\n\r\n  handleClick(i) {\r\n    const currentSquares = this.state.squares;\r\n    if (this.state.winner || currentSquares[i]) {\r\n      // მეორედ რო აღარ დააკლიკოს იგივეს\r\n      return;\r\n    }\r\n\r\n    currentSquares[i] = this.state.isXNext ? 'X' : 'O';\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      squares: currentSquares,\r\n      isXNext: !this.state.isXNext,\r\n      stepNumber: currentSquares.length\r\n    });\r\n\r\n\r\n    let winner, winnerLine = null;\r\n    ({winner, winnerLine} = this.calculateWinner(currentSquares));\r\n\r\n    if (winner) {\r\n      this.setState({\r\n        ...this.state,\r\n        winner: winner,\r\n        winnerLine: winnerLine\r\n      });\r\n    }\r\n  }\r\n\r\n  resetGame() {\r\n    // this.setState(INITIALSTATE);\r\n    this.setState({\r\n      isXNext: true,\r\n      stepNumber: 0,\r\n      squares: Array(9).fill(null),\r\n      width: 80,\r\n      height: 80,\r\n      winner: null,\r\n      winnerLine: []\r\n    });\r\n  }\r\n\r\n\r\n  calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n        return {\r\n          winner: squares[a],\r\n          winnerLine: lines[i]\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      winner: null,\r\n      winnerLine: null\r\n    };\r\n  }\r\n\r\n\r\n  handleWidthChange(e) {\r\n    this.setState({\r\n      ...this.state,\r\n      width: e.target.value\r\n    });\r\n  }\r\n\r\n  handleHeightChange(e) {\r\n    this.setState({\r\n      ...this.state,\r\n      height: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let settings;\r\n    if (this.state.stepNumber === 0) {\r\n      settings = <Settings\r\n        width={this.state.width}\r\n        height={this.state.height}\r\n        widthChanged={event => this.handleWidthChange(event)}\r\n        heightChanged={event => this.handleHeightChange(event)}\r\n      />;\r\n    }\r\n\r\n    let winStatus;\r\n    if (this.state.winner) {\r\n      winStatus = 'Winner is: ' + this.state.winner;\r\n    } else if (!this.state.squares.includes(null) && !this.state.winner) {\r\n      winStatus = 'Draw';\r\n    } else {\r\n      winStatus = 'Next player is ' + (this.state.isXNext ? 'X' : 'O');\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"game\">\r\n\r\n        <div className=\"board\">\r\n          <h1>{winStatus}</h1>\r\n\r\n          <Board onClick={(i) => this.handleClick(i)}\r\n                 squares={this.state.squares}\r\n                 squareWidth={this.state.width}\r\n                 squareHeight={this.state.height}\r\n                 winnerSquars={this.state.winnerLine}/>\r\n\r\n          <button className=\"reset-btn\" onClick={() => this.resetGame()}>reset game</button>\r\n        </div>\r\n\r\n        <div>{settings}</div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game/Game';\n\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t< Game />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}